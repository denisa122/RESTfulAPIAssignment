openapi: 3.0.0
info:
  title: REST API Compulsory Assignment
  description: MEN (MongoDB - ExpressJS - NodeJS) REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
tags:
- name: "user"
  description: "Operations related to users"
- name: "actor"
  description: "Operations related to actors"
- name: "movie"
  description: "Operations related to movies"
paths:
  /user/register:
    post:
      tags:
      - "user"
      summary: "Registers a new User"
      description: "Registers a new User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "User created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: "string"
                  _id:
                    type: "string"
        400:
          description: "Bad request"
        409:
          description: "Username or email already taken!"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs in a User"
      description: "Logs in a User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
                  data:
                    type: "string"          
  /actors/:
    post:
      tags:
      - "actor"
      summary: "Creates a new Actor"
      description: "Creates a new Actor"
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Actor"
      responses:
        201:
          description: "Actor created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actor"
        500:
          description: "Internal server error"
    get:
      tags:
      - "actor"
      summary: "Retrieves a list of Actors"
      description: "Retrieves a list of Actors"
      responses:
        200:
          description: "Successfully retrieved all Actors in the format of a JSON object"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Actor"
        500:
          description: "Internal server error"
  /actors/{id}:
    get:
      tags:
      - "actor"
      summary: "Retrieves an Actor with a specific id"
      description: "Retrieves an Actor with a specific id"
      parameters:
        - in: path
          name: "id"
          description: "MongoDB id"
          schema:
            type: "string"
      responses:
        200:
          description: "Successfully retrieved an Actor in the format of a JSON object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actor"
        500: 
          description: "Internal server error"
    put:
      tags:
      - "actor"
      summary: "Updates an Actor with a specific id"
      description: "Updates an Actor with a specific id"
      security:
       - ApiKeyAuth: []
      parameters:
        - in: path
          name: "id"
          description: "MongoDB id"
          schema: 
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/Actor"
      responses:
        201:
          description: "Actor updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actor"
        404:
          description: "Actor with specific id couldn't be updated. Check if you entered the correct id!"
        500:
          description: "Internal server error"
    delete:
      tags:
        - "actor"
      summary: "Deletes an Actor with a specific id"
      description: "Deletes an Actor with a specific id"
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: "id"
          description: "MongoDB id"
          schema:
            type: "string"
      responses:
        200:
          description: "Actor deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actor"
        404: 
          description: "Actor with specific id couldn't be updated. Check if you entered the correct id!"
        500:
          description: "Internal server error"
  /movies/:
    post:
      tags:
        - "movie"
      summary: "Creates a new Movie"
      description: "Creates a new Movie"
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MovieRequest"
      responses:
        201:
          description: "Movie created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        500:
          description: "Internal server error"
    get:
      tags:
      - "movie"
      summary: "Retrieves a list of Movies"
      description: "Retrieves a list of Movies"
      responses:
        200:
          description: "Successfully retrieved all Movies in the format of a JSON object"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MovieResponse"
        500:
          description: "Internal server error"
  /movies/{year}:
    get:
      tags:
        - "movie"
      summary: "Retrieves a list of Movies with a specific year of release property"
      description: "Retrieves a list of Movies with a specific year of release property"
      parameters:
        - in: path
          name: "year"
          description: "Year of release"
          schema: 
            type: "string"
      responses:
        200:
          description: "Successfully retrieved all Movies in the format of a JSON object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        500: 
          description: "Internal server error"
  /movies/{id}:
    get:
      tags:
        - "movie"
      summary: "Retrieves a Movie with a specific id"
      description: "Retrieves a Movie with a specific id"
      parameters:
          - in: path
            name: "id"
            description: "MongoDB id"
            schema: 
              type: "string"
      responses:
        200:
          description: "Successfully retrieved a Movies in the format of a JSON object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        500: 
          description: "Internal server error"
    put:
      tags:
      - "movie"
      summary: "Updates a Movie with a specific id"
      description: "Updates a Movie with a specific id"
      security:
       - ApiKeyAuth: []
      parameters:
        - in: path
          name: "id"
          description: "MongoDB id"
          schema: 
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/MovieRequest"
      responses:
        201:
          description: "Movie updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        404:
          description: "Movie with specific id couldn't be updated. Check if you entered the correct id!"
        500:
          description: "Internal server error"
    delete:
      tags:
        - "movie"
      summary: "Deletes a Movie with a specific id"
      description: "Deletes a Movie with a specific id"
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: "id"
          description: "MongoDB id"
          schema:
            type: "string"
      responses:
        200:
          description: "Movie deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        404: 
          description: "Movie with specific id couldn't be updated. Check if you entered the correct id!"
        500:
          description: "Internal server error"
components:
  securitySchemes:
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "auth-token"
  schemas:
    Actor:
      type: "object"
      required:
        - firstName
        - lastName
      properties:
        id:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        yearOfBirth:
          type: "number"
        awards: 
          type: "array"
          items:
            type: "string"
    MovieRequest:
      type: "object"
      required:
        - title
      properties:
        id:
          type: "string"
        title:
          type: "string"
        genre:
          type: "string"
        description: 
          type: "string"
        director: 
          type: "string"
        yearOfRelease:
          type: "number"
        castIds:
          type: "array"
          items:
            type: "string"
    MovieResponse:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        genre:
          type: "string"
        description: 
          type: "string"
        director: 
          type: "string"
        yearOfRelease:
          type: "number"
        cast:
          type: "array"
          items:
            $ref: "#/components/schemas/Actor"
    User:
      type: "object"
      required:
        - username
        - email
        - password
      properties:
        firstName:
          type: "string"
          minLength: 2
          maxLength: 200
        lastName:
          type: "string"
          minLength: 2
          maxLength: 200
        username:
          type: "string"
          minLength: 6
          maxLength: 25
        email:
          type: "string"
        password:
          type: "string"
          minLength: 8
          maxLength: 128
    UserLogin:
      type: "object"
      required:
        - email
        - password
      properties:
        email:
          type: "string"
        password:
          type: "string"
          minLength: 8
          maxLength: 128